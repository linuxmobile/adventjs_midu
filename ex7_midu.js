/* En los almacenes de Pap√° Noel est√°n haciendo inventario. Hay tres almacenes (que se representa cada uno como un Array). En cada almac√©n hay regalos.

Nos han pedido que escribamos un programa que nos diga qu√© regalos hay que comprar para reponer en nuestros almac√©nes ahora que se acerca la Navidad.. Un regalo se tiene que reponer cuando s√≥lo hay stock en uno de los tres almac√©nes.

Por ejemplo, si tenemos los siguientes almacenes:

const a1 = ['bici', 'coche', 'bici', 'bici']
const a2 = ['coche', 'bici', 'mu√±eca', 'coche']
const a3 = ['bici', 'pc', 'pc']

/* El almac√©n a1 tiene "bici" y "coche".
El almac√©n a2 tiene "coche", "bici" y "mu√±eca".
El almac√©n a3 tiene "bici" y "pc".

El regalo "mu√±eca" y "pc" s√≥lo est√°n en los almacenes a2 y a3 respectivamente.
*/

/* 
const gifts = getGiftsToRefill(a1, a2, a3) // ['mu√±eca', 'pc']
Como ves, los almac√©nes pueden tener el mismo regalo repetido varias veces. Pero, por m√°s existencias que haya en un almac√©n, si no tenemos en los otros dos, debemos reponerlo para tener mejor distribuci√≥n.

üìù Summary
Crea una funci√≥n getGiftsToRefill que reciba tres Array como par√°metros.
La funci√≥n debe devolver un Array con los regalos que hay que reponer.
Un regalo se debe reponer cuando s√≥lo hay stock en uno de los tres almac√©nes.
Si no hay ning√∫n regalo que reponer, la funci√≥n debe devolver un Array vac√≠o.
Si hay m√°s de un regalo que reponer, la funci√≥n debe devolver un Array con todos los regalos que hay que reponer. */


// los almacenes pueden tener el mismo regalo repetido varias veces
// pero, por m√°s existencias que haya en un almac√©n, si no tenemos en los otros dos, debemos reponerlo para tener mejor distribuci√≥n
/* function getGiftsToRefill(a1, a2, a3) {
    let giftsToRefill = [];
    for (let i = 0; i < a1.length; i++) {
      if (giftsToRefill.includes(a1[i])) {
        continue;
      }
      if (!a2.includes(a1[i]) && !a3.includes(a1[i])) {
        giftsToRefill.push(a1[i]);
      }
    }
    for (let i = 0; i < a2.length; i++) {
      if (giftsToRefill.includes(a2[i])) {
        continue;
      }
  
      if (!a1.includes(a2[i]) && !a3.includes(a2[i])) {
        giftsToRefill.push(a2[i]);
      }
    }
    for (let i = 0; i < a3.length; i++) {
      if (giftsToRefill.includes(a3[i])) {
        continue;
      }
      if (!a1.includes(a3[i]) && !a2.includes(a3[i])) {
        giftsToRefill.push(a3[i]);
      }
    }
    return giftsToRefill;
  }  10 pts */

/*   function getGiftsToRefill(a1, a2, a3) {
    let giftsToRefill = [];
    [a1, a2, a3].forEach((array) => {
      const otherArrays = [a1, a2, a3].filter((arr) => arr !== array);
      array.reduce((giftsToRefill, gift) => {
        if (otherArrays.every((arr) => !arr.includes(gift)) && !giftsToRefill.includes(gift)) {
          giftsToRefill.push(gift);
        }
        return giftsToRefill;
      }, giftsToRefill);
    });
    return giftsToRefill;
  } 40 pts */

  function getGiftsToRefill(a1, a2, a3) {
    const gifts = [...new Set([...a1, ...a2, ...a3])]; // Combina los tres arrays en uno solo y elimina duplicados
    return gifts.filter((gift) => a1.includes(gift) + a2.includes(gift) + a3.includes(gift) === 1); // Devuelve solo los elementos que aparezcan una √∫nica vez en los tres arrays
}  
  